// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/account/account.proto

/*
Package org_dakstudios_srv_auth_account is a generated protocol buffer package.

It is generated from these files:
	proto/account/account.proto

It has these top-level messages:
	User
	Role
	ReadUserRequest
	ReadUserResponse
	CreateUserRequest
	CreateUserResponse
	UpdateUserRequest
	UpdateUserResponse
	DeleteUserRequest
	DeleteUserResponse
	SearchUserRequest
	SearchUserResponse
	ReadRoleRequest
	ReadRoleResponse
	ReadAllRolesRequest
	ReadAllRolesResponse
	CreateRoleRequest
	CreateRoleResponse
	UpdateRoleRequest
	UpdateRoleResponse
	DeleteRoleRequest
	DeleteRoleResponse
*/
package org_dakstudios_srv_auth_account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	// user uuid
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// user roles
	Roles     []*Role `protobuf:"bytes,2,rep,name=roles" json:"roles,omitempty"`
	FirstName string  `protobuf:"bytes,3,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName  string  `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Email     string  `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	// may be blank
	Password string `protobuf:"bytes,6,opt,name=password" json:"password,omitempty"`
	// unix timestamp
	Created int64 `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	// unix timestamp
	Updated int64 `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *User) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type Role struct {
	// role uuid
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// role name
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// role permissions
	Permissions []string `protobuf:"bytes,3,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Role) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type ReadUserRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadUserRequest) Reset()                    { *m = ReadUserRequest{} }
func (m *ReadUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadUserRequest) ProtoMessage()               {}
func (*ReadUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReadUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadUserResponse struct {
	Account *User `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *ReadUserResponse) Reset()                    { *m = ReadUserResponse{} }
func (m *ReadUserResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadUserResponse) ProtoMessage()               {}
func (*ReadUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadUserResponse) GetAccount() *User {
	if m != nil {
		return m.Account
	}
	return nil
}

type CreateUserRequest struct {
	// account id should be blank
	Account *User `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateUserRequest) GetAccount() *User {
	if m != nil {
		return m.Account
	}
	return nil
}

type CreateUserResponse struct {
}

func (m *CreateUserResponse) Reset()                    { *m = CreateUserResponse{} }
func (m *CreateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateUserResponse) ProtoMessage()               {}
func (*CreateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type UpdateUserRequest struct {
	// account id cannot be changed
	Account *User `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateUserRequest) GetAccount() *User {
	if m != nil {
		return m.Account
	}
	return nil
}

type UpdateUserResponse struct {
}

func (m *UpdateUserResponse) Reset()                    { *m = UpdateUserResponse{} }
func (m *UpdateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserResponse) ProtoMessage()               {}
func (*UpdateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type DeleteUserRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteUserRequest) Reset()                    { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()               {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteUserResponse struct {
}

func (m *DeleteUserResponse) Reset()                    { *m = DeleteUserResponse{} }
func (m *DeleteUserResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserResponse) ProtoMessage()               {}
func (*DeleteUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type SearchUserRequest struct {
	// supports pagination
	Limit  int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *SearchUserRequest) Reset()                    { *m = SearchUserRequest{} }
func (m *SearchUserRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchUserRequest) ProtoMessage()               {}
func (*SearchUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SearchUserRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchUserRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type SearchUserResponse struct {
	Accounts []*User `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
}

func (m *SearchUserResponse) Reset()                    { *m = SearchUserResponse{} }
func (m *SearchUserResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchUserResponse) ProtoMessage()               {}
func (*SearchUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SearchUserResponse) GetAccounts() []*User {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type ReadRoleRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadRoleRequest) Reset()                    { *m = ReadRoleRequest{} }
func (m *ReadRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRoleRequest) ProtoMessage()               {}
func (*ReadRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReadRoleRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadRoleResponse struct {
	Role *Role `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
}

func (m *ReadRoleResponse) Reset()                    { *m = ReadRoleResponse{} }
func (m *ReadRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadRoleResponse) ProtoMessage()               {}
func (*ReadRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReadRoleResponse) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type ReadAllRolesRequest struct {
}

func (m *ReadAllRolesRequest) Reset()                    { *m = ReadAllRolesRequest{} }
func (m *ReadAllRolesRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadAllRolesRequest) ProtoMessage()               {}
func (*ReadAllRolesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type ReadAllRolesResponse struct {
	Roles []*Role `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
}

func (m *ReadAllRolesResponse) Reset()                    { *m = ReadAllRolesResponse{} }
func (m *ReadAllRolesResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadAllRolesResponse) ProtoMessage()               {}
func (*ReadAllRolesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ReadAllRolesResponse) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

type CreateRoleRequest struct {
	Role *Role `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
}

func (m *CreateRoleRequest) Reset()                    { *m = CreateRoleRequest{} }
func (m *CreateRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRoleRequest) ProtoMessage()               {}
func (*CreateRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CreateRoleRequest) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type CreateRoleResponse struct {
}

func (m *CreateRoleResponse) Reset()                    { *m = CreateRoleResponse{} }
func (m *CreateRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateRoleResponse) ProtoMessage()               {}
func (*CreateRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type UpdateRoleRequest struct {
	Role *Role `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
}

func (m *UpdateRoleRequest) Reset()                    { *m = UpdateRoleRequest{} }
func (m *UpdateRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRoleRequest) ProtoMessage()               {}
func (*UpdateRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UpdateRoleRequest) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type UpdateRoleResponse struct {
}

func (m *UpdateRoleResponse) Reset()                    { *m = UpdateRoleResponse{} }
func (m *UpdateRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateRoleResponse) ProtoMessage()               {}
func (*UpdateRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type DeleteRoleRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRoleRequest) Reset()                    { *m = DeleteRoleRequest{} }
func (m *DeleteRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRoleRequest) ProtoMessage()               {}
func (*DeleteRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *DeleteRoleRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteRoleResponse struct {
}

func (m *DeleteRoleResponse) Reset()                    { *m = DeleteRoleResponse{} }
func (m *DeleteRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteRoleResponse) ProtoMessage()               {}
func (*DeleteRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func init() {
	proto.RegisterType((*User)(nil), "org.dakstudios.srv.auth.account.User")
	proto.RegisterType((*Role)(nil), "org.dakstudios.srv.auth.account.Role")
	proto.RegisterType((*ReadUserRequest)(nil), "org.dakstudios.srv.auth.account.ReadUserRequest")
	proto.RegisterType((*ReadUserResponse)(nil), "org.dakstudios.srv.auth.account.ReadUserResponse")
	proto.RegisterType((*CreateUserRequest)(nil), "org.dakstudios.srv.auth.account.CreateUserRequest")
	proto.RegisterType((*CreateUserResponse)(nil), "org.dakstudios.srv.auth.account.CreateUserResponse")
	proto.RegisterType((*UpdateUserRequest)(nil), "org.dakstudios.srv.auth.account.UpdateUserRequest")
	proto.RegisterType((*UpdateUserResponse)(nil), "org.dakstudios.srv.auth.account.UpdateUserResponse")
	proto.RegisterType((*DeleteUserRequest)(nil), "org.dakstudios.srv.auth.account.DeleteUserRequest")
	proto.RegisterType((*DeleteUserResponse)(nil), "org.dakstudios.srv.auth.account.DeleteUserResponse")
	proto.RegisterType((*SearchUserRequest)(nil), "org.dakstudios.srv.auth.account.SearchUserRequest")
	proto.RegisterType((*SearchUserResponse)(nil), "org.dakstudios.srv.auth.account.SearchUserResponse")
	proto.RegisterType((*ReadRoleRequest)(nil), "org.dakstudios.srv.auth.account.ReadRoleRequest")
	proto.RegisterType((*ReadRoleResponse)(nil), "org.dakstudios.srv.auth.account.ReadRoleResponse")
	proto.RegisterType((*ReadAllRolesRequest)(nil), "org.dakstudios.srv.auth.account.ReadAllRolesRequest")
	proto.RegisterType((*ReadAllRolesResponse)(nil), "org.dakstudios.srv.auth.account.ReadAllRolesResponse")
	proto.RegisterType((*CreateRoleRequest)(nil), "org.dakstudios.srv.auth.account.CreateRoleRequest")
	proto.RegisterType((*CreateRoleResponse)(nil), "org.dakstudios.srv.auth.account.CreateRoleResponse")
	proto.RegisterType((*UpdateRoleRequest)(nil), "org.dakstudios.srv.auth.account.UpdateRoleRequest")
	proto.RegisterType((*UpdateRoleResponse)(nil), "org.dakstudios.srv.auth.account.UpdateRoleResponse")
	proto.RegisterType((*DeleteRoleRequest)(nil), "org.dakstudios.srv.auth.account.DeleteRoleRequest")
	proto.RegisterType((*DeleteRoleResponse)(nil), "org.dakstudios.srv.auth.account.DeleteRoleResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AccountService service

type AccountServiceClient interface {
	ReadUser(ctx context.Context, in *ReadUserRequest, opts ...client.CallOption) (*ReadUserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error)
	SearchUser(ctx context.Context, in *SearchUserRequest, opts ...client.CallOption) (*SearchUserResponse, error)
}

type accountServiceClient struct {
	c           client.Client
	serviceName string
}

func NewAccountServiceClient(serviceName string, c client.Client) AccountServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "org.dakstudios.srv.auth.account"
	}
	return &accountServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *accountServiceClient) ReadUser(ctx context.Context, in *ReadUserRequest, opts ...client.CallOption) (*ReadUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AccountService.ReadUser", in)
	out := new(ReadUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AccountService.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AccountService.UpdateUser", in)
	out := new(UpdateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AccountService.DeleteUser", in)
	out := new(DeleteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SearchUser(ctx context.Context, in *SearchUserRequest, opts ...client.CallOption) (*SearchUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AccountService.SearchUser", in)
	out := new(SearchUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceHandler interface {
	ReadUser(context.Context, *ReadUserRequest, *ReadUserResponse) error
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	UpdateUser(context.Context, *UpdateUserRequest, *UpdateUserResponse) error
	DeleteUser(context.Context, *DeleteUserRequest, *DeleteUserResponse) error
	SearchUser(context.Context, *SearchUserRequest, *SearchUserResponse) error
}

func RegisterAccountServiceHandler(s server.Server, hdlr AccountServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&AccountService{hdlr}, opts...))
}

type AccountService struct {
	AccountServiceHandler
}

func (h *AccountService) ReadUser(ctx context.Context, in *ReadUserRequest, out *ReadUserResponse) error {
	return h.AccountServiceHandler.ReadUser(ctx, in, out)
}

func (h *AccountService) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.AccountServiceHandler.CreateUser(ctx, in, out)
}

func (h *AccountService) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error {
	return h.AccountServiceHandler.UpdateUser(ctx, in, out)
}

func (h *AccountService) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error {
	return h.AccountServiceHandler.DeleteUser(ctx, in, out)
}

func (h *AccountService) SearchUser(ctx context.Context, in *SearchUserRequest, out *SearchUserResponse) error {
	return h.AccountServiceHandler.SearchUser(ctx, in, out)
}

// Client API for RoleService service

type RoleServiceClient interface {
	ReadRole(ctx context.Context, in *ReadRoleRequest, opts ...client.CallOption) (*ReadRoleResponse, error)
	ReadAllRoles(ctx context.Context, in *ReadAllRolesRequest, opts ...client.CallOption) (*ReadAllRolesResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*CreateRoleResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...client.CallOption) (*UpdateRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error)
}

type roleServiceClient struct {
	c           client.Client
	serviceName string
}

func NewRoleServiceClient(serviceName string, c client.Client) RoleServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "org.dakstudios.srv.auth.account"
	}
	return &roleServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *roleServiceClient) ReadRole(ctx context.Context, in *ReadRoleRequest, opts ...client.CallOption) (*ReadRoleResponse, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.ReadRole", in)
	out := new(ReadRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) ReadAllRoles(ctx context.Context, in *ReadAllRolesRequest, opts ...client.CallOption) (*ReadAllRolesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.ReadAllRoles", in)
	out := new(ReadAllRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*CreateRoleResponse, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.CreateRole", in)
	out := new(CreateRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...client.CallOption) (*UpdateRoleResponse, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.UpdateRole", in)
	out := new(UpdateRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.DeleteRole", in)
	out := new(DeleteRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleService service

type RoleServiceHandler interface {
	ReadRole(context.Context, *ReadRoleRequest, *ReadRoleResponse) error
	ReadAllRoles(context.Context, *ReadAllRolesRequest, *ReadAllRolesResponse) error
	CreateRole(context.Context, *CreateRoleRequest, *CreateRoleResponse) error
	UpdateRole(context.Context, *UpdateRoleRequest, *UpdateRoleResponse) error
	DeleteRole(context.Context, *DeleteRoleRequest, *DeleteRoleResponse) error
}

func RegisterRoleServiceHandler(s server.Server, hdlr RoleServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&RoleService{hdlr}, opts...))
}

type RoleService struct {
	RoleServiceHandler
}

func (h *RoleService) ReadRole(ctx context.Context, in *ReadRoleRequest, out *ReadRoleResponse) error {
	return h.RoleServiceHandler.ReadRole(ctx, in, out)
}

func (h *RoleService) ReadAllRoles(ctx context.Context, in *ReadAllRolesRequest, out *ReadAllRolesResponse) error {
	return h.RoleServiceHandler.ReadAllRoles(ctx, in, out)
}

func (h *RoleService) CreateRole(ctx context.Context, in *CreateRoleRequest, out *CreateRoleResponse) error {
	return h.RoleServiceHandler.CreateRole(ctx, in, out)
}

func (h *RoleService) UpdateRole(ctx context.Context, in *UpdateRoleRequest, out *UpdateRoleResponse) error {
	return h.RoleServiceHandler.UpdateRole(ctx, in, out)
}

func (h *RoleService) DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error {
	return h.RoleServiceHandler.DeleteRole(ctx, in, out)
}

func init() { proto.RegisterFile("proto/account/account.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 654 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x6e, 0x9a, 0x74, 0x6b, 0xdf, 0xd0, 0xa0, 0xa6, 0xa0, 0xa8, 0x13, 0xa2, 0x04, 0x21, 0xf5,
	0x14, 0xa0, 0x85, 0x03, 0xe2, 0x80, 0x2a, 0x38, 0xc2, 0x0e, 0x29, 0x13, 0x47, 0x14, 0x1a, 0x97,
	0x45, 0xa4, 0x75, 0x67, 0xa7, 0xdb, 0x89, 0xdf, 0x8b, 0xc4, 0x9d, 0x3b, 0xca, 0xb3, 0xd3, 0xb8,
	0xf5, 0xa0, 0x8e, 0xb6, 0xd3, 0xe6, 0xf7, 0xfc, 0xbd, 0xef, 0xf9, 0xe5, 0x7b, 0xdf, 0x06, 0x27,
	0x2b, 0xce, 0x72, 0xf6, 0x3c, 0x9e, 0xcd, 0xd8, 0x7a, 0x99, 0x97, 0x3f, 0x43, 0x8c, 0x92, 0xc7,
	0x8c, 0x7f, 0x0f, 0x93, 0xf8, 0x87, 0xc8, 0xd7, 0x49, 0xca, 0x44, 0x28, 0xf8, 0x65, 0x18, 0xaf,
	0xf3, 0xf3, 0x50, 0x5d, 0x0b, 0xfe, 0x38, 0xe0, 0x9d, 0x09, 0xca, 0xc9, 0x31, 0x34, 0xd3, 0xc4,
	0x77, 0x06, 0xce, 0xb0, 0x13, 0x35, 0xd3, 0x84, 0xbc, 0x85, 0x16, 0x67, 0x19, 0x15, 0x7e, 0x73,
	0xe0, 0x0e, 0x8f, 0x46, 0xcf, 0xc2, 0x3d, 0x95, 0xc2, 0x88, 0x65, 0x34, 0x92, 0x18, 0xf2, 0x08,
	0x60, 0x9e, 0x72, 0x91, 0x7f, 0x5d, 0xc6, 0x0b, 0xea, 0xbb, 0x58, 0xb4, 0x83, 0x91, 0xd3, 0x78,
	0x41, 0xc9, 0x09, 0x74, 0xb2, 0xb8, 0xcc, 0x7a, 0x98, 0x6d, 0x17, 0x01, 0x4c, 0xf6, 0xa0, 0x45,
	0x17, 0x71, 0x9a, 0xf9, 0x2d, 0x4c, 0xc8, 0x03, 0xe9, 0x43, 0x7b, 0x15, 0x0b, 0x71, 0xc5, 0x78,
	0xe2, 0x1f, 0x48, 0x44, 0x79, 0x26, 0x3e, 0x1c, 0xce, 0x38, 0x8d, 0x73, 0x9a, 0xf8, 0x87, 0x03,
	0x67, 0xe8, 0x46, 0xe5, 0xb1, 0xc8, 0xac, 0x57, 0x09, 0x66, 0xda, 0x32, 0xa3, 0x8e, 0xc1, 0x47,
	0xf0, 0x8a, 0x86, 0x8d, 0x67, 0x13, 0xf0, 0xb0, 0xab, 0x26, 0x46, 0xf0, 0x77, 0x32, 0x80, 0xa3,
	0x15, 0xe5, 0x8b, 0x54, 0x88, 0x94, 0x2d, 0x85, 0xef, 0x0e, 0xdc, 0x61, 0x27, 0xd2, 0x43, 0xc1,
	0x13, 0xb8, 0x1b, 0xd1, 0x38, 0x29, 0x06, 0x19, 0xd1, 0x8b, 0x35, 0x15, 0xf9, 0x6e, 0xe1, 0x60,
	0x0a, 0xf7, 0xaa, 0x2b, 0x62, 0xc5, 0x96, 0x82, 0x92, 0x77, 0x70, 0xa8, 0xa6, 0x87, 0x17, 0x6d,
	0xa6, 0x8c, 0xf8, 0x12, 0x15, 0x7c, 0x86, 0xee, 0x7b, 0x7c, 0xaa, 0xce, 0x7c, 0xe3, 0xaa, 0x3d,
	0x20, 0x7a, 0x55, 0xd9, 0x6c, 0xc1, 0x75, 0x86, 0xc3, 0xbb, 0x6d, 0x2e, 0xbd, 0xaa, 0xe2, 0x7a,
	0x0a, 0xdd, 0x0f, 0x34, 0xa3, 0xdb, 0x5c, 0xbb, 0x13, 0xed, 0x01, 0xd1, 0x2f, 0x29, 0xe8, 0x04,
	0xba, 0x53, 0x1a, 0xf3, 0xd9, 0xb9, 0x0e, 0xed, 0x41, 0x2b, 0x4b, 0x17, 0xa9, 0x6c, 0xd2, 0x8d,
	0xe4, 0x81, 0x3c, 0x84, 0x03, 0x36, 0x9f, 0x0b, 0x9a, 0xe3, 0xd7, 0x76, 0x23, 0x75, 0x0a, 0xbe,
	0x00, 0xd1, 0x4b, 0xa8, 0x8f, 0x35, 0x81, 0xb6, 0x6a, 0x5a, 0xf8, 0x8e, 0xe5, 0x4e, 0x60, 0x81,
	0x0d, 0xac, 0x94, 0x09, 0x6e, 0xca, 0x3f, 0x1e, 0xf5, 0x49, 0xca, 0x44, 0x5e, 0x51, 0xcc, 0x6f,
	0xc0, 0x2b, 0xd6, 0xca, 0x7a, 0xc2, 0x08, 0x46, 0x48, 0xf0, 0x00, 0xee, 0x17, 0xe5, 0x26, 0x59,
	0x56, 0x04, 0x85, 0x62, 0x0d, 0xa6, 0xd0, 0xdb, 0x0e, 0x2b, 0xa6, 0xcd, 0xd2, 0x3b, 0xf5, 0x97,
	0x3e, 0x38, 0x2d, 0xc5, 0xa8, 0xbf, 0xef, 0x06, 0xbd, 0x6f, 0x64, 0xa8, 0x0f, 0xa3, 0x60, 0x91,
	0x82, 0xb9, 0x3d, 0x16, 0xbd, 0xde, 0xae, 0x00, 0xff, 0xf7, 0xad, 0x36, 0x02, 0xd4, 0xa1, 0xa3,
	0x5f, 0x1e, 0x1c, 0x4f, 0x24, 0xcf, 0x94, 0xf2, 0xcb, 0x74, 0x46, 0xc9, 0x05, 0xb4, 0xcb, 0xdd,
	0x27, 0x2f, 0xf6, 0x37, 0xb7, 0xed, 0x24, 0xfd, 0x97, 0x35, 0x10, 0xaa, 0xfd, 0x06, 0xb9, 0x02,
	0xa8, 0x76, 0x98, 0x8c, 0xf6, 0x96, 0x30, 0x6c, 0xa4, 0x3f, 0xae, 0x85, 0xd1, 0x89, 0xab, 0x85,
	0xb6, 0x20, 0x36, 0x3c, 0xc5, 0x82, 0xf8, 0x1a, 0xc7, 0x40, 0xe2, 0xca, 0x0e, 0x2c, 0x88, 0x0d,
	0x83, 0xb1, 0x20, 0xbe, 0xc6, 0x6f, 0x90, 0xb8, 0xb2, 0x0b, 0x0b, 0x62, 0xc3, 0x9e, 0x2c, 0x88,
	0x4d, 0x3f, 0x0a, 0x1a, 0xa3, 0xdf, 0x1e, 0x1c, 0x15, 0xd2, 0xdb, 0x91, 0x19, 0xfe, 0x5d, 0xb3,
	0x93, 0x99, 0xa6, 0x6e, 0x4b, 0x99, 0x6d, 0x6d, 0x49, 0x83, 0xfc, 0x84, 0x3b, 0xba, 0x91, 0x90,
	0x57, 0x56, 0x45, 0x76, 0xec, 0xa8, 0xff, 0xba, 0x26, 0xca, 0x54, 0x39, 0xbe, 0xd9, 0x56, 0xe5,
	0xfa, 0xab, 0xc7, 0xb5, 0x30, 0xa6, 0xca, 0x2d, 0x89, 0x0d, 0xcb, 0xb2, 0x56, 0xb9, 0x49, 0x5c,
	0x79, 0x8e, 0xb5, 0xca, 0xeb, 0x11, 0x9b, 0xa6, 0x16, 0x34, 0xbe, 0x1d, 0xe0, 0x3f, 0x94, 0xe3,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x9e, 0x6d, 0xdb, 0x6f, 0x0a, 0x00, 0x00,
}
